import os
from pathlib import Path
import pytest

from opencell.database import (
    models, utils, metadata_operations, fov_operations, file_utils, constants
)


@pytest.fixture(scope='session')
def test_data_dirpath():
    '''
    The path to the directory of test data
    '''
    return Path(__file__).parent.parent / 'artifacts' / 'data'


@pytest.fixture(scope='session')
def library_snapshot_filepath(test_data_dirpath):
    '''
    An old snapshot of the 'da list' google sheet (this lists crispr designs for plates 1-19)
    '''
    return os.path.join(test_data_dirpath, 'metadata', '2019-06-26_mNG11_HEK_library.csv')


@pytest.fixture(scope='session')
def library_snapshot(library_snapshot_filepath):
    return file_utils.load_library_snapshot(library_snapshot_filepath)


@pytest.fixture(scope='session')
def pipeline_microscopy_master_key_snapshot(test_data_dirpath):
    return file_utils.load_pipeline_microscopy_master_key(
        os.path.join(
            test_data_dirpath, 'metadata', '2021-05-21-pipeline-microscopy-master-key-snapshot.csv'
        )
    )


@pytest.fixture(scope='session')
def fov_metadata_full_plate_filepath(test_data_dirpath):
    '''
    The real/unaltered 'fov-metadata' CSV generated by dragonfly-automation QC from PML0348
    (this was full plate13 with no platemap)
    '''
    return os.path.join(test_data_dirpath, 'microscopy', 'PML0348-fov-metadata.csv')


@pytest.fixture(scope='session')
def fov_metadata_redos_filepath(test_data_dirpath):
    '''
    The real/unaltered 'fov-metadata' CSV generated by dragonfly-automation QC from PML0253
    this was plate9 redos w custom platemap (i.e., only a few wells)
    '''
    return os.path.join(test_data_dirpath, 'microscopy', 'PML0253-fov-metadata.csv')


@pytest.fixture(scope='session')
def fov_metadata_full_plate(fov_metadata_full_plate_filepath):
    fov_metadata = file_utils.load_pipeline_microscopy_dataset_metadata(
        fov_metadata_full_plate_filepath
    )
    return fov_metadata


@pytest.fixture(scope='session')
def fov_metadata_redos(fov_metadata_redos_filepath):
    return file_utils.load_pipeline_microscopy_dataset_metadata(
        fov_metadata_redos_filepath
    )


@pytest.fixture(scope='session')
def fov_metadata(fov_metadata_redos):
    '''
    A generic fov-metadata example (in which all FOVs are from the same plate)
    For now, use the redos metadata for this purpose
    '''
    return fov_metadata_redos.copy()


@pytest.fixture(scope='function')
def insert_plate(session, library_snapshot_filepath):
    '''
    Insert the plate design, crispr designs, polyclonal lines for a given plate
    '''
    def _insert_plate(plate_id):
        metadata_operations.get_or_create_progenitor_cell_line(
            session, name=constants.PARENTAL_LINE_NAME, create=True
        )
        metadata_operations.insert_plate_design(session, plate_id, library_snapshot_filepath)
        metadata_operations.insert_electroporation(
            session, plate_id, electroporation_date='2021-01-01'
        )
    return _insert_plate


@pytest.fixture(scope='function')
def plate1(insert_plate):
    insert_plate('P0001')


@pytest.fixture(scope='function')
def microscopy_datasets(session, pipeline_microscopy_master_key_snapshot):
    '''
    Insert microcopy datasets from a snapshot of the pipeline-microscopy-master-key google sheet
    (that is, all 'raw-pipeline-microscopy' datasets, which start at PML0196)
    '''
    root_directory = 'raw_pipeline_microscopy'
    for _, row in pipeline_microscopy_master_key_snapshot.iterrows():
        fov_operations.insert_microscopy_dataset(session, row, root_directory, update=True)


@pytest.fixture(scope='function')
def fov(session):
    return None
